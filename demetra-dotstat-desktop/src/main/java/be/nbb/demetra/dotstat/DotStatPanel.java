/*
 * Copyright 2015 National Bank of Belgium
 * 
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * 
 * http://ec.europa.eu/idabc/eupl
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package be.nbb.demetra.dotstat;

import be.nbb.demetra.sdmx.web.SdmxWebProvider;
import be.nbb.sdmx.facade.LanguagePriorityList;
import be.nbb.sdmx.facade.SdmxConnectionSupplier;
import be.nbb.sdmx.facade.driver.SdmxDriverManager;
import be.nbb.sdmx.facade.driver.WsEntryPoint;
import ec.nbdemetra.ui.completion.JAutoCompletionService;
import ec.nbdemetra.ui.nodes.AbstractNodeBuilder;
import ec.nbdemetra.ui.properties.NodePropertySetBuilder;
import ec.nbdemetra.ui.properties.PropertySheetDialogBuilder;
import ec.tss.tsproviders.TsProviders;
import ec.util.various.swing.FontAwesome;
import ec.util.various.swing.ext.FontAwesomeUtils;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.beans.BeanInfo;
import java.beans.PropertyChangeEvent;
import java.util.Optional;
import javax.swing.AbstractAction;
import javax.swing.Action;
import org.netbeans.api.actions.Editable;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.Sheet;
import org.openide.util.lookup.Lookups;

final class DotStatPanel extends javax.swing.JPanel implements ExplorerManager.Provider {

    private final DotStatOptionsPanelController controller;
    private final ExplorerManager em;

    DotStatPanel(DotStatOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        this.em = new ExplorerManager();
        outlineView1.getOutline().setRootVisible(false);
        addButton.setEnabled(false);
        removeButton.setEnabled(false);
        editButton.setEnabled(false);
        resetButton.setEnabled(false);
        em.addVetoableChangeListener((PropertyChangeEvent evt) -> {
            if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                Node[] nodes = (Node[]) evt.getNewValue();
//                    removeButton.setEnabled(nodes.length == 1);
                editButton.setEnabled(nodes.length == 1);
            }
        });
        JAutoCompletionService.forPathBind(JAutoCompletionService.LOCALE_PATH, preferedLangTextBox);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outlineView1 = new org.openide.explorer.view.OutlineView("Web service entry points");
        jToolBar1 = new javax.swing.JToolBar();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        resetButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        preferedLangTextBox = new javax.swing.JTextField();
        displayCodesCheckBox = new javax.swing.JCheckBox();

        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ec/nbdemetra/ui/list-add_16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(DotStatPanel.class, "DotStatPanel.addButton.text")); // NOI18N
        addButton.setFocusable(false);
        addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addButton);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ec/nbdemetra/ui/list-remove_16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(removeButton, org.openide.util.NbBundle.getMessage(DotStatPanel.class, "DotStatPanel.removeButton.text")); // NOI18N
        removeButton.setFocusable(false);
        removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(removeButton);

        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ec/nbdemetra/ui/preferences-system_16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(editButton, org.openide.util.NbBundle.getMessage(DotStatPanel.class, "DotStatPanel.editButton.text")); // NOI18N
        editButton.setFocusable(false);
        editButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(editButton);
        jToolBar1.add(jSeparator1);

        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ec/nbdemetra/ui/edit-clear_16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(resetButton, org.openide.util.NbBundle.getMessage(DotStatPanel.class, "DotStatPanel.resetButton.text")); // NOI18N
        resetButton.setFocusable(false);
        resetButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resetButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(resetButton);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DotStatPanel.class, "DotStatPanel.jLabel1.text")); // NOI18N

        preferedLangTextBox.setText(org.openide.util.NbBundle.getMessage(DotStatPanel.class, "DotStatPanel.preferedLangTextBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(displayCodesCheckBox, org.openide.util.NbBundle.getMessage(DotStatPanel.class, "DotStatPanel.displayCodesCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(outlineView1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(preferedLangTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(displayCodesCheckBox)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(preferedLangTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayCodesCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outlineView1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(236, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removeButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        ((Editable) em.getSelectedNodes()[0]).edit();
    }//GEN-LAST:event_editButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resetButtonActionPerformed

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    private static Optional<SdmxWebProvider> lookupProvider() {
        return TsProviders.lookup(SdmxWebProvider.class, SdmxWebProvider.NAME).toJavaUtil();
    }

    private void loadEntryPoints(SdmxConnectionSupplier supplier) {
        if (supplier instanceof SdmxDriverManager) {
            AbstractNodeBuilder b = new AbstractNodeBuilder();
            ((SdmxDriverManager) supplier).getEntryPoints().forEach(x -> b.add(new ConfigNode(x)));
            em.setRootContext(b.name("hello").build());
        }
    }

    void load() {
        lookupProvider().ifPresent(o -> {
            preferedLangTextBox.setText(o.getLanguages().toString());
            displayCodesCheckBox.setSelected(o.isDisplayCodes());
            loadEntryPoints(o.getConnectionSupplier());
        });
    }

    void store() {
        lookupProvider().ifPresent(o -> {
            try {
                o.setLanguages(LanguagePriorityList.parse(preferedLangTextBox.getText()));
            } catch (IllegalArgumentException ex) {
            }
            o.setDisplayCodes(displayCodesCheckBox.isSelected());
        });
    }

    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox displayCodesCheckBox;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private org.openide.explorer.view.OutlineView outlineView1;
    private javax.swing.JTextField preferedLangTextBox;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables

    private static final class ConfigNode extends AbstractNode implements Editable {

        public ConfigNode(WsEntryPoint o) {
            super(Children.LEAF, Lookups.singleton(o));
            setDisplayName(o.getName());
            setShortDescription(o.getDescription());
        }

        @Override
        public Image getIcon(int type) {
            return FontAwesomeUtils.getImage(FontAwesome.FA_LINK, type);
        }

        @Override
        public Image getOpenedIcon(int type) {
            return getIcon(type);
        }

        @Override
        protected Sheet createSheet() {
            WsEntryPoint bean = getLookup().lookup(WsEntryPoint.class);
            Sheet result = new Sheet();
            NodePropertySetBuilder b = new NodePropertySetBuilder();
            b.with(String.class)
                    .select(bean, "getName", null)
                    .display("Name")
                    .add();
            b.with(String.class)
                    .select(bean, "getDescription", null)
                    .display("Description")
                    .add();
            b.with(String.class)
                    .select("uri", bean.getUri().toString())
                    .display("URI")
                    .add();
            result.put(b.build());
            return result;
        }

        @Override
        public Action getPreferredAction() {
            return new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    edit();
                }
            };
        }

        @Override
        public void edit() {
            if (new PropertySheetDialogBuilder().title("Edit entry point").icon(getIcon(BeanInfo.ICON_MONO_16x16)).editNode(this)) {
                setDisplayName(getLookup().lookup(WsEntryPoint.class).getName());
            }
        }
    }
}
